{
  "hash": "93985b4baa7f93c0c6850269e06f9a34",
  "result": {
    "markdown": "---\ntitle: \"Pulling Data\"\nformat: \n  html:\n    eval: false\n---\n\n\nBelow is the code used to import all data sets used for this workshop. There are tons of R packages that allow you to connect to open-source spatial databases and pull spatial data right into your R session (without having to download and read in the data separately). Some packages require an API key before importing the data, which are free to sign up for.\n\n## Load in Libraries\n\nThis function checks if all packages are installed in your local system, if not it will install them, and then load all of them into your R session. If you don't have any of these packages installed this step may take a little while.\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackageLoad <-\n  function(x) {\n    for (i in 1:length(x)) {\n      if (!x[i] %in% installed.packages()) {\n        install.packages(x[i])\n      }\n      library(x[i], character.only = TRUE)\n    }\n  }\n\npackageLoad(c(\"elevatr\", \"rgbif\", \"tidycensus\", \"tigris\", \"sf\", \"terra\", \"dplyr\"))\n```\n:::\n\n\nFor this workshop we are focusing on the state of Colorado, so we first download some political boundaries to use to filter the raster layers we want returned. The `tigris` package allows you to directly download TIGER/Line shapefiles from the US Census Bureau.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# download county shapefile for the state of Colorado\ncounties <- tigris::counties(state = \"CO\")\n```\n:::\n\n\n## Raster Data\n\nGet elevation data using the [`elevatr`](https://github.com/jhollist/elevatr) package. The function `get_elev_raster()` returns a raster digital elevation model (DEM) from the AWS Open Data Terrain Tiles. For this function you must supply a spatial object specifying the extent of the returned elevation raster and the resolution (specified by the zoom level `z`). We are importing elevation at \\~ 1km resolution (\\~ 900 m).\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# get elevation at ~1km (864m)\nelevation <- get_elev_raster(counties, z = 7)\n\n# save elevation to file as a GeoTIFF\nterra::writeRaster(elevation, \"data/elevation_1km.tif\")\n```\n:::\n\n\nFor this workshop we are also going to work with a land cover raster data set from the National Land Cover Database (NLCD). You can download NLCD data directly from R using the [`FedData`](https://docs.ropensci.org/FedData/) package, however the most updated land cover data available is from 2011. For this course, NLCD 2019 CONUS data was downloaded to my local system from the [MRLC website](https://www.mrlc.gov/data/nlcd-2019-land-cover-conus). The following code is how I read in and cleaned the land cover data for use in this workshop. Processing includes cropping the CONUS data set to the state of Colorado, and then aggregating (reducing the resolution) of the raster from 30m to \\~1km (990m) to make processing and analysis quicker for the workshop.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Read in the raster (image) file\nland <- terra::rast('L:/Projects_active/EnviroScreen/data/NLCD/Land Cover/nlcd_2019_land_cover_l48_20210604.img') \n\n#transform the counties spatial object to match landcover so we can perform crop and mask operations\ncounties_aea <- st_transform(counties, crs(land))\n\n# crop the landcover to Colorado\nland_co <- land %>% \n  terra::crop(vect(counties_aea)) %>%\n  terra::mask(vect(counties_aea))\n\n\n#aggregate to ~1km for ease of processing/analysis in course\nland_co1km <- terra::aggregate(land_co, fact = 33, fun = \"modal\")\n\n\n# save processed raster file\nterra::writeRaster(land_co1km, filename = \"data/NLCD_CO.tif\", overwrite = TRUE)\n```\n:::\n\n\n## Point Data\n\nWe will be working with some species occurrences in the form of point data (latitude/longitude). `rgbif` is a package that allows you to download species occurrences from the [Global Biodiversity Information Facility (GBIF)](https://www.gbif.org/), a database of global species occurrences with over 2.2 billion records.\n\n|                           |                              |                                  |\n|:------------------:|:-----------------------:|:--------------------------:|\n| ![](elk.jpg){width=\"182\"} | ![](marmot.jpg){width=\"171\"} | ![](salamander.jpg){width=\"208\"} |\n|            Elk            |    Yellow-Bellied Marmot     |     Western Tiger Salamander     |\n\n\n::: {.cell}\n\n```{.r .cell-code}\n#make a string of species names to use in the 'occ_data' function\nspecies <- c(\"Cervus canadensis\", \"Marmota flaviventris\", \"Ambystoma mavortium\")\n\n#also make a string of common names to use for plotting later\ncommon_name <- c(\"Elk\", \"Yellow-bellied Marmot\", \"Western Tiger Salamander\")\n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# write a for loop to extract occurrence data for each species\n\n# create an empty vector to store each species' downloaded occurrence data\nocc <- vector(\"list\", length = length(species)) \n\n\nfor(i in 1:length(occ)){\n  \n  occ[[i]] <-\n    occ_data(\n      scientificName = species[i],\n      hasCoordinate = TRUE,\n      geometry = st_bbox(counties),\n      limit = 2000\n    ) %>%\n    .$data #return just the data frame\n  \n  # add species name column as ID to use later\n  occ[[i]]$ID <- common_name[i]\n  \n  #clean by removing duplicate occurrences\n  occ[[i]] <-\n    occ[[i]] %>% distinct(decimalLatitude, decimalLongitude, .keep_all = TRUE) %>%\n    dplyr::select(Species = ID,\n           decimalLatitude,\n           decimalLongitude,\n           year,\n           month,\n           basisOfRecord) #only keep relevant variables\n  \n  \n  \n  print(i) # this prints each element once its finished so you can see the progress\n  \n}\n\n# Bind all data frames together\nocc <- bind_rows(occ) \n```\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\nwrite_csv(occ, \"data/species_occ.csv\")\n```\n:::\n\n\n## Line Data\n\nUse the `tigris` package to download linear water features (streams/rivers, braided streams, canals, ditches, artificial paths, and aqueducts) and roads for Larimer County.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrivers <- linear_water(state = \"CO\", county = \"Larimer\")\n\nroads <- roads(state = \"CO\", county = \"Larimer\")\n\n# save the files\nst_write(rivers, \"data/rivers.shp\")\n\nst_write(roads, \"data/roads.shp\")\n```\n:::\n\n\n## Polygon Data\n\nWe already imported a spatial polygon data set, `counties`. We are going to work with one more polygon data set from the `tigris` package which includes the boundaries of individual urban areas and clusters across Colorado. We have to do a little data cleaning to filter just urban areas within the state of Colorado.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nurban <- urban_areas() %>% \n  tidyr::separate(col = NAME10, sep = \", \", into = c(\"city\", \"state\")) %>% \n  dplyr::filter(state == \"CO\")\n\n#save the file\nst_write(urban, \"data/urban_areas.shp\")\n```\n:::\n\n\nFinally, we are going to work with some census variables, namely total population and median household income. You can import census data with the `tidycensus` package, which does require an API key. You can obtain a key for free [here](http://api.census.gov/data/key_signup.html). We import these variables using the `get_acs()` function (\"acs\" stands for American Community Survey), specifying the state of Colorado and to return data at the county level. We import just the county level data here as we will tie these attributes to our spatial data later, but you could also import these results as spatial objects by setting `geometry = TRUE`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# supply your unique API key\ncensus_api_key(\"PASTE YOUR API KEY HERE\")\n\n#import total population and median household income\ncensus <- get_acs(geography = \"county\", state = \"CO\", year = 2019,\n                  variables = c(\"B01003_001\", \"B19013_001\"), output = \"wide\")\n\n#clean the data\ncensus <- census %>% \n  dplyr::select(contains(\"E\")) %>% \n  rename(total_pop = B01003_001E, med_income = B19013_001E)\n\n#save it\nwrite_csv(census, \"data/census_data.csv\")\n```\n:::\n\n\n## Other Data Libraries\n\nR's collection of data retrieval libraries is extensive. We only use a few of them in this workshop, but I wanted to mention a few other packages that may be of interest:\n\n|                                                                                                       |                                                                                                                                         |\n|-------------------------------|-----------------------------------------|\n| [`rnaturalearth`](https://docs.ropensci.org/rnaturalearth/articles/rnaturalearth.html)                | Natural Earth spatial data                                                                                                              |\n| [`rnoaa`](https://docs.ropensci.org/rnoaa/articles/rnoaa.html)                                        | NOAA weather data                                                                                                                       |\n| [`dataRetrieval`](https://cran.r-project.org/web/packages/dataRetrieval/vignettes/dataRetrieval.html) | USGS water data                                                                                                                         |\n| [`wdpar`](https://cran.r-project.org/web/packages/wdpar/vignettes/wdpar.html)                         | World Database on Protected Areas                                                                                                       |\n| [`rgee`](https://github.com/r-spatial/rgee)                                                           | use Google Earth Engine (and connect to the entire data collection) in R                                                                |\n| [`nhdplusTools`](https://usgs-r.github.io/nhdplusTools/)                                              | Hydrographic data                                                                                                                       |\n| [`FedData`](https://github.com/ropensci/FedData)                                                      | Spatial data from several U.S. federal data sources, such as elevation, hydrography, soil, land cover, cropland, and climate data sets. |\n",
    "supporting": [
      "getdata_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}